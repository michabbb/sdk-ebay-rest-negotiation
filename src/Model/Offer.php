<?php
/**
 * Offer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\negotiation
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Negotiation API
 *
 * The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.
 *
 * The version of the OpenAPI document: v1.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\negotiation\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\negotiation\ObjectSerializer;

/**
 * Offer Class Doc Comment
 *
 * @category Class
 * @description A complex type that defines an offer that a seller makes to eligible buyers.
 * @package  macropage\SDKs\ebay\rest\negotiation
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Offer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Offer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowCounterOffer' => 'bool',
        'buyer' => '\macropage\SDKs\ebay\rest\negotiation\Model\User',
        'creationDate' => 'string',
        'initiatedBy' => 'string',
        'lastModifiedDate' => 'string',
        'message' => 'string',
        'offerDuration' => '\macropage\SDKs\ebay\rest\negotiation\Model\TimeDuration',
        'offeredItems' => '\macropage\SDKs\ebay\rest\negotiation\Model\OfferedItem[]',
        'offerId' => 'string',
        'offerStatus' => 'string',
        'offerType' => 'string',
        'revision' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allowCounterOffer' => null,
        'buyer' => null,
        'creationDate' => null,
        'initiatedBy' => null,
        'lastModifiedDate' => null,
        'message' => null,
        'offerDuration' => null,
        'offeredItems' => null,
        'offerId' => null,
        'offerStatus' => null,
        'offerType' => null,
        'revision' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allowCounterOffer' => false,
		'buyer' => false,
		'creationDate' => false,
		'initiatedBy' => false,
		'lastModifiedDate' => false,
		'message' => false,
		'offerDuration' => false,
		'offeredItems' => false,
		'offerId' => false,
		'offerStatus' => false,
		'offerType' => false,
		'revision' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowCounterOffer' => 'allowCounterOffer',
        'buyer' => 'buyer',
        'creationDate' => 'creationDate',
        'initiatedBy' => 'initiatedBy',
        'lastModifiedDate' => 'lastModifiedDate',
        'message' => 'message',
        'offerDuration' => 'offerDuration',
        'offeredItems' => 'offeredItems',
        'offerId' => 'offerId',
        'offerStatus' => 'offerStatus',
        'offerType' => 'offerType',
        'revision' => 'revision'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowCounterOffer' => 'setAllowCounterOffer',
        'buyer' => 'setBuyer',
        'creationDate' => 'setCreationDate',
        'initiatedBy' => 'setInitiatedBy',
        'lastModifiedDate' => 'setLastModifiedDate',
        'message' => 'setMessage',
        'offerDuration' => 'setOfferDuration',
        'offeredItems' => 'setOfferedItems',
        'offerId' => 'setOfferId',
        'offerStatus' => 'setOfferStatus',
        'offerType' => 'setOfferType',
        'revision' => 'setRevision'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowCounterOffer' => 'getAllowCounterOffer',
        'buyer' => 'getBuyer',
        'creationDate' => 'getCreationDate',
        'initiatedBy' => 'getInitiatedBy',
        'lastModifiedDate' => 'getLastModifiedDate',
        'message' => 'getMessage',
        'offerDuration' => 'getOfferDuration',
        'offeredItems' => 'getOfferedItems',
        'offerId' => 'getOfferId',
        'offerStatus' => 'getOfferStatus',
        'offerType' => 'getOfferType',
        'revision' => 'getRevision'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allowCounterOffer', $data ?? [], null);
        $this->setIfExists('buyer', $data ?? [], null);
        $this->setIfExists('creationDate', $data ?? [], null);
        $this->setIfExists('initiatedBy', $data ?? [], null);
        $this->setIfExists('lastModifiedDate', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('offerDuration', $data ?? [], null);
        $this->setIfExists('offeredItems', $data ?? [], null);
        $this->setIfExists('offerId', $data ?? [], null);
        $this->setIfExists('offerStatus', $data ?? [], null);
        $this->setIfExists('offerType', $data ?? [], null);
        $this->setIfExists('revision', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowCounterOffer
     *
     * @return bool|null
     */
    public function getAllowCounterOffer()
    {
        return $this->container['allowCounterOffer'];
    }

    /**
     * Sets allowCounterOffer
     *
     * @param bool|null $allowCounterOffer If set to <code>true</code>, the buyer is allowed to make a counter-offer to the seller's offer.
     *
     * @return self
     */
    public function setAllowCounterOffer($allowCounterOffer)
    {
        if (is_null($allowCounterOffer)) {
            throw new \InvalidArgumentException('non-nullable allowCounterOffer cannot be null');
        }
        $this->container['allowCounterOffer'] = $allowCounterOffer;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \macropage\SDKs\ebay\rest\negotiation\Model\User|null
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \macropage\SDKs\ebay\rest\negotiation\Model\User|null $buyer buyer
     *
     * @return self
     */
    public function setBuyer($buyer)
    {
        if (is_null($buyer)) {
            throw new \InvalidArgumentException('non-nullable buyer cannot be null');
        }
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param string|null $creationDate The date and time when the seller's offer was created.  <br><br>The returned timestamp is formatted as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a> string, which is based on the 24-hour Coordinated Universal Time (UTC) clock.  <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2018-08-20T07:09:00.000Z</code>
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        if (is_null($creationDate)) {
            throw new \InvalidArgumentException('non-nullable creationDate cannot be null');
        }
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets initiatedBy
     *
     * @return string|null
     */
    public function getInitiatedBy()
    {
        return $this->container['initiatedBy'];
    }

    /**
     * Sets initiatedBy
     *
     * @param string|null $initiatedBy The eBay <b>UserName</b> of the user (seller) who initiated the offer.
     *
     * @return self
     */
    public function setInitiatedBy($initiatedBy)
    {
        if (is_null($initiatedBy)) {
            throw new \InvalidArgumentException('non-nullable initiatedBy cannot be null');
        }
        $this->container['initiatedBy'] = $initiatedBy;

        return $this;
    }

    /**
     * Gets lastModifiedDate
     *
     * @return string|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['lastModifiedDate'];
    }

    /**
     * Sets lastModifiedDate
     *
     * @param string|null $lastModifiedDate The date and time when the offer was last modified.  <br><br>The returned timestamp is formatted as an <a href=\"http://www.iso.org/iso/home/standards/iso8601.htm\" target=\"_blank\">ISO 8601</a> string.
     *
     * @return self
     */
    public function setLastModifiedDate($lastModifiedDate)
    {
        if (is_null($lastModifiedDate)) {
            throw new \InvalidArgumentException('non-nullable lastModifiedDate cannot be null');
        }
        $this->container['lastModifiedDate'] = $lastModifiedDate;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message A seller-defined message related to the offer being made. This message is sent to the list of \"interested\" buyers along with the offer message from eBay.
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets offerDuration
     *
     * @return \macropage\SDKs\ebay\rest\negotiation\Model\TimeDuration|null
     */
    public function getOfferDuration()
    {
        return $this->container['offerDuration'];
    }

    /**
     * Sets offerDuration
     *
     * @param \macropage\SDKs\ebay\rest\negotiation\Model\TimeDuration|null $offerDuration offerDuration
     *
     * @return self
     */
    public function setOfferDuration($offerDuration)
    {
        if (is_null($offerDuration)) {
            throw new \InvalidArgumentException('non-nullable offerDuration cannot be null');
        }
        $this->container['offerDuration'] = $offerDuration;

        return $this;
    }

    /**
     * Gets offeredItems
     *
     * @return \macropage\SDKs\ebay\rest\negotiation\Model\OfferedItem[]|null
     */
    public function getOfferedItems()
    {
        return $this->container['offeredItems'];
    }

    /**
     * Sets offeredItems
     *
     * @param \macropage\SDKs\ebay\rest\negotiation\Model\OfferedItem[]|null $offeredItems The list of items associated with the offer. <br><br>Currently, the offer list is restricted to a single offer.
     *
     * @return self
     */
    public function setOfferedItems($offeredItems)
    {
        if (is_null($offeredItems)) {
            throw new \InvalidArgumentException('non-nullable offeredItems cannot be null');
        }
        $this->container['offeredItems'] = $offeredItems;

        return $this;
    }

    /**
     * Gets offerId
     *
     * @return string|null
     */
    public function getOfferId()
    {
        return $this->container['offerId'];
    }

    /**
     * Sets offerId
     *
     * @param string|null $offerId A unique eBay-assigned identifier for the offer.
     *
     * @return self
     */
    public function setOfferId($offerId)
    {
        if (is_null($offerId)) {
            throw new \InvalidArgumentException('non-nullable offerId cannot be null');
        }
        $this->container['offerId'] = $offerId;

        return $this;
    }

    /**
     * Gets offerStatus
     *
     * @return string|null
     */
    public function getOfferStatus()
    {
        return $this->container['offerStatus'];
    }

    /**
     * Sets offerStatus
     *
     * @param string|null $offerStatus The current state, or status, of an offer.  <br><br>Status states include <code>PENDING</code>, <code>COUNTERED</code>, <code>ACCEPTED</code>, and <code>DECLINED</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/negotiation/types/api:OfferStatusEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setOfferStatus($offerStatus)
    {
        if (is_null($offerStatus)) {
            throw new \InvalidArgumentException('non-nullable offerStatus cannot be null');
        }
        $this->container['offerStatus'] = $offerStatus;

        return $this;
    }

    /**
     * Gets offerType
     *
     * @return string|null
     */
    public function getOfferType()
    {
        return $this->container['offerType'];
    }

    /**
     * Sets offerType
     *
     * @param string|null $offerType The type of offer being made. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/negotiation/types/api:OfferTypeEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setOfferType($offerType)
    {
        if (is_null($offerType)) {
            throw new \InvalidArgumentException('non-nullable offerType cannot be null');
        }
        $this->container['offerType'] = $offerType;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return string|null
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param string|null $revision A unique, eBay-assigned ID for the revision of the offer.
     *
     * @return self
     */
    public function setRevision($revision)
    {
        if (is_null($revision)) {
            throw new \InvalidArgumentException('non-nullable revision cannot be null');
        }
        $this->container['revision'] = $revision;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


